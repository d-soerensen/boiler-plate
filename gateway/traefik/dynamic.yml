# Traefik dynamic configuration
http:
  middlewares:
    # CORS middleware
    cors:
      headers:
        accessControlAllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        accessControlAllowOriginList:
          - "http://localhost:3000"
          - "http://localhost:4200"
          - "https://intellifinder.com"
        accessControlAllowHeaders:
          - "Content-Type"
          - "Authorization"
          - "X-Requested-With"
        accessControlMaxAge: 100
        addVaryHeader: true

    # Rate limiting middleware
    rate-limit:
      rateLimit:
        burst: 100
        average: 50

    # Authentication middleware
    auth:
      forwardAuth:
        address: "http://auth-service:8080/auth/validate"
        authResponseHeaders:
          - "X-User-Id"
          - "X-User-Roles"

    # Circuit breaker middleware
    circuit-breaker:
      circuitBreaker:
        expression: "NetworkErrorRatio() > 0.3 || ResponseCodeRatio(500, 600, 0, 600) > 0.3"
        checkPeriod: "10s"
        fallbackDuration: "30s"
        recoveryDuration: "10s"

    # Retry middleware
    retry:
      retry:
        attempts: 3
        initialInterval: "100ms"

    # Compression middleware
    compress:
      compress: {}

    # Security headers middleware
    security-headers:
      headers:
        customRequestHeaders:
          X-Forwarded-Proto: "https"
        customResponseHeaders:
          X-Frame-Options: "DENY"
          X-Content-Type-Options: "nosniff"
          X-XSS-Protection: "1; mode=block"
          Strict-Transport-Security: "max-age=31536000; includeSubDomains"

    # Strip prefix middleware for API routes
    strip-api-prefix:
      stripPrefix:
        prefixes:
          - "/api/v1"

    # Strip prefix middleware for Prometheus
    prometheus-stripprefix:
      stripPrefix:
        prefixes:
          - "/prometheus"

    # Strip prefix middleware for Keycloak
    keycloak-stripprefix:
      stripPrefix:
        prefixes:
          - "/auth"

    # Strip prefix middleware for Keycloak Admin
    keycloak-admin-stripprefix:
      stripPrefix:
        prefixes:
          - "/auth/admin"

    # Strip prefix middleware for Jaeger
    jaeger-stripprefix:
      stripPrefix:
        prefixes:
          - "/jaeger"

  routers:
    # Infrastructure services - direct routing
    prometheus-router:
      rule: "Host(`localhost`) && PathPrefix(`/prometheus`)"
      service: "prometheus-service"
      middlewares:
        - "cors"
        - "security-headers"

    grafana-router:
      rule: "Host(`localhost`) && PathPrefix(`/grafana`)"
      service: "grafana-service"
      middlewares:
        - "cors"
        - "security-headers"

    keycloak-router:
      rule: "Host(`localhost`) && PathPrefix(`/auth`)"
      service: "keycloak-service"
      middlewares:
        - "cors"
        - "security-headers"
        - "keycloak-stripprefix"

    keycloak-admin-router:
      rule: "Host(`localhost`) && PathPrefix(`/auth/admin`)"
      service: "keycloak-service"
      middlewares:
        - "cors"
        - "security-headers"
        - "keycloak-admin-stripprefix"

    loki-router:
      rule: "Host(`localhost`) && PathPrefix(`/loki`)"
      service: "loki-service"
      middlewares:
        - "cors"
        - "security-headers"

    jaeger-router:
      rule: "Host(`localhost`) && PathPrefix(`/jaeger`)"
      service: "jaeger-service"
      middlewares:
        - "cors"
        - "security-headers"

    # API Gateway router - supports both localhost and intellifinder.local
    # Commented out until gateway service is implemented
    # api-gateway:
    #   rule: "Host(`api.intellifinder.local`) || Host(`localhost`)"
    #   service: "gateway"
    #   middlewares:
    #     - "cors"
    #     - "rate-limit"
    #     - "security-headers"
    #     - "retry"
    #     - "circuit-breaker"

    # Application service routers - commented out until services are implemented
    # Auth service router - direct access via localhost:8082
    # auth-service-direct:
    #   rule: "Host(`localhost`) && PathPrefix(`/auth`)"
    #   service: "auth-service"
    #   middlewares:
    #     - "cors"
    #     - "security-headers"
    #     - "strip-api-prefix"

    # Auth service router - via API gateway
    # auth-service-gateway:
    #   rule: "Host(`api.intellifinder.local`) && PathPrefix(`/auth`)"
    #   service: "auth-service"
    #   middlewares:
    #     - "cors"
    #     - "security-headers"
    #     - "strip-api-prefix"

    # Tasks service router - direct access via localhost:8083
    # tasks-service-direct:
    #   rule: "Host(`localhost`) && PathPrefix(`/tasks`)"
    #   service: "tasks-service"
    #   middlewares:
    #     - "cors"
    #     - "auth"
    #     - "security-headers"
    #     - "strip-api-prefix"

    # Tasks service router - via API gateway
    # tasks-service-gateway:
    #   rule: "Host(`api.intellifinder.local`) && PathPrefix(`/tasks`)"
    #   service: "tasks-service"
    #   middlewares:
    #     - "cors"
    #     - "auth"
    #     - "security-headers"
    #     - "strip-api-prefix"

    # Collections service router - direct access via localhost:8084
    # collections-service-direct:
    #   rule: "Host(`localhost`) && PathPrefix(`/collections`)"
    #   service: "collections-service"
    #   middlewares:
    #     - "cors"
    #     - "auth"
    #     - "security-headers"
    #     - "strip-api-prefix"

    # Collections service router - via API gateway
    # collections-service-gateway:
    #   rule: "Host(`api.intellifinder.local`) && PathPrefix(`/collections`)"
    #   service: "collections-service"
    #   middlewares:
    #     - "cors"
    #     - "auth"
    #     - "security-headers"
    #     - "strip-api-prefix"

    # Forms service router - direct access via localhost:8085
    # forms-service-direct:
    #   rule: "Host(`localhost`) && PathPrefix(`/forms`)"
    #   service: "forms-service"
    #   middlewares:
    #     - "cors"
    #     - "auth"
    #     - "security-headers"
    #     - "strip-api-prefix"

    # Forms service router - via API gateway
    # forms-service-gateway:
    #   rule: "Host(`api.intellifinder.local`) && PathPrefix(`/forms`)"
    #   service: "forms-service"
    #   middlewares:
    #     - "cors"
    #     - "auth"
    #     - "security-headers"
    #     - "strip-api-prefix"

    # Tags service router - direct access via localhost:8086
    # tags-service-direct:
    #   rule: "Host(`localhost`) && PathPrefix(`/tags`)"
    #   service: "tags-service"
    #   middlewares:
    #     - "cors"
    #     - "auth"
    #     - "security-headers"
    #     - "strip-api-prefix"

    # Tags service router - via API gateway
    # tags-service-gateway:
    #   rule: "Host(`api.intellifinder.local`) && PathPrefix(`/tags`)"
    #   service: "tags-service"
    #   middlewares:
    #     - "cors"
    #     - "auth"
    #     - "security-headers"
    #     - "strip-api-prefix"

  services:
    # Infrastructure services
    prometheus-service:
      loadBalancer:
        servers:
          - url: "http://prometheus:9090"

    grafana-service:
      loadBalancer:
        servers:
          - url: "http://grafana:3000"

    keycloak-service:
      loadBalancer:
        servers:
          - url: "http://keycloak:8080"

    loki-service:
      loadBalancer:
        servers:
          - url: "http://loki:3100"

    jaeger-service:
      loadBalancer:
        servers:
          - url: "http://jaeger:16686"

    # Application services - commented out until implemented
    # gateway:
    #   loadBalancer:
    #     servers:
    #       - url: "http://gateway:8080"

    # auth-service:
    #   loadBalancer:
    #     servers:
    #       - url: "http://auth-service:8080"

    # tasks-service:
    #   loadBalancer:
    #     servers:
    #       - url: "http://tasks-service:8080"

    # collections-service:
    #   loadBalancer:
    #     servers:
    #       - url: "http://collections-service:8080"

    # forms-service:
    #   loadBalancer:
    #     servers:
    #       - url: "http://forms-service:8080"

    # tags-service:
    #   loadBalancer:
    #     servers:
    #       - url: "http://tags-service:8080"
